<style>
  .products-grid .product-image-container {
    outline-color: #bdbdbd;
    outline-style: solid;
    outline-width: 1px;
    border: 10px solid transparent;
  }
  .products-grid a:hover .product-image-container {
    border-image: url("{{ 'pattern-271.jpg' | asset_url }}") 10 round;
    outline-color: transparent;
  }

  .product-code {
    color: #acacac;
  }
  .product-compare-price span {
    color: #bdbdbd;
  }

  #sort-by {
    border-color: #bdbdbd;
  }

  .sidebar-filter {
    max-width: 225px;
  }

  @media screen and (min-width: 1024px) {
    .sidebar-filter {
      margin-right: 75px;
    }
  }
  @media screen and (min-width: 1170px) {
    .products-grid {
      width: 870px;
    }

    .products-grid .product-image-container {
      min-height: 280px;
    }
  }
  
</style>
{% render 'stripe-pattern' %}

<div class="container mx-auto xct:flex xct:justify-between py-50px lg:py-100px">
  {% paginate collection.products by 12 %}
    <div class="sidebar-filter">
      <div class="category-filter pb-6 xct:pb-14">
        <h4 class="uppercase font-extrabold text-lg font-euro border-b pb-4 mb-7 border-wc-black">Shop by categories</h4>
          <a href="/collections/all" class="text-lg block">All</a>
        {% for product_type in collection.all_types %}
          {% if product_type == blank %}
            {% continue %}
          {% endif %}
          {{ product_type | link_to_type: class: 'text-lg block' }}
        {% endfor %}
      </div>
      
      {% render 'filters' %}
    </div>
    <div>
      <div class="mt-11 lg:mt-0 flex flex-col md:flex-row justify-between items-center">
        <h1 class="uppercase text-3xl">{{ collection.title }}</h1>
        <div class="flex items-center">
          <p class="uppercase font-euro font-extrabold mr-4">Sort by</p>
          {% assign sort_by = collection.sort_by | default: collection.default_sort_by %}
          <div class="collection__sort flex justify-end" 
            x-data="{
              loading: false,
              sort: '{{ sort_by }}',
              sortCollection(){
                this.loading = true;
                fetch('/collections/{{ collection.handle }}?sort_by=' + this.sort)
                  .then(response => response.text())
                  .then(data => {
                    let html_div = document.createElement('div');
                    html_div.innerHTML = data;
      
                    let html_dom = html_div.querySelector('.products-grid').innerHTML;
                    document.querySelector('.products-grid').innerHTML = html_dom;
                    // update url without refreshing the page 
                    history.replaceState(null, null, '?sort_by=' + this.sort);
                  })
                  .catch(error => console.error('Error:', error))
                  .finally(() => this.loading = false);
              }
            }">
            
            {% render 'loader' %}
      
            <select id="sort-by" x-model="sort" @change="sortCollection()" class="py-3 px-4 my-3 border border-black">
              {% for option in collection.sort_options %}
                <option value="{{ option.value }}" {% if option.value == sort_by %}selected="selected"{% endif %}>
                  {{ option.name }}
                </option>
              {% endfor %}
            </select>
            
          </div>
        </div>
      </div>
      
      <div class="products-grid py-50px lg:pb-100px grid grid-cols-1 gap-y-10 place-content-center lg:grid-cols-2 xct:grid-cols-3 lg:gap-x-30px lg:gap-y-12">
        {% for product in collection.products %}
          {% render 'product-card', product: product %}
        {% else %}
          <p>There are no products inside of this collection.</p>
        {% endfor %}
      </div>
    </div>
    {% render 'pagination', pagination: paginate %}
  {% endpaginate %}
</div>